{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "A1_Logistic_Regression.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/SharoonSaxena/Comparison-of-Machine-Learning-Algorithms-Over-an-Image-Classifier/blob/master/Final%20project%20Notebook)"
      ]
    },
    {
      "metadata": {
        "id": "sea_1h-HIGvt",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# Comparison of Generic Machine Learning Algorithms"
      ]
    },
    {
      "metadata": {
        "id": "cOe4zX1WSeiM",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "##  1. Importing the necessary Libraries\n",
        "\n",
        "### numpy\n",
        "        NumPy is the fundamental package for scientific computing with Python. It contains among other things: a powerful N-dimensional array object; sophisticated (broadcasting) functions\n",
        "\n",
        "### pandas\n",
        "        In computer programming, pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series.\n",
        "        \n",
        "### datetime\n",
        "        In Python, date, time and datetime classes provides a number of function to deal with dates, times and time intervals. Date and datetime are an object in Python, so when you manipulate them, you are actually manipulating objects and not string or timestamps.\n",
        "        \n",
        "### matplotlib\n",
        "        Matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy."
      ]
    },
    {
      "metadata": {
        "id": "vsSN9slmSeiN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ae47be86-8d28-4fbc-f4ef-399700053c43"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "#import warnings; warnings.simplefilter('ignore')\n",
        "%env JOBLIB_TEMP_FOLDER=/tmp\n",
        "import seaborn as sns"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "env: JOBLIB_TEMP_FOLDER=/tmp\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "cVZxoGinS6ie",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Install the PyDrive wrapper & import libraries.\n",
        "# This only needs to be done once per notebook.\n",
        "!pip install -U -q PyDrive\n",
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "\n",
        "# Authenticate and create the PyDrive client.\n",
        "# This only needs to be done once per notebook.\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)\n",
        "\n",
        "# Download a file based on its file ID.\n",
        "\n",
        "## Train Set\n",
        "# A file ID looks like: laggVyWshwcyP6kEI-y_W3P8D26sz\n",
        "file_id = '1EeL52mhnbgDZqW6FBw5hBg9FmPkyvBfV'\n",
        "train_img = drive.CreateFile({'id': file_id})\n",
        "\n",
        "## TRAIN LABELS\n",
        "file_id = '18IzeXxGnqpL5NB10BWAdCvwVTjZJ6m8Z'\n",
        "train_label = drive.CreateFile({'id': file_id})\n",
        "\n",
        "## TEST SET\n",
        "file_id = '1ZwbZH4ifTeD0gEGstMgf7YOABJUOIry_'\n",
        "test_img = drive.CreateFile({'id': file_id})\n",
        "\n",
        "## TEST LABELS\n",
        "file_id = '1Cbpi0BfWrZ7-v-ephE8zpjkdc0Voh8Vg'\n",
        "test_label = drive.CreateFile({'id': file_id})\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "_TC_cWNhIr0e",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 2. Importing the dataset"
      ]
    },
    {
      "metadata": {
        "id": "iP01hJEeSeiU",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "\n",
        "This is done in the following way, Using the Pandas Library.\n",
        "#### Syntax: \n",
        "#### pd.read_csv('File_Name')\n",
        "\n",
        "### Also\n",
        "\n",
        "### We need to saperate the Independent and the dependent variables, i.e. x and y respectively.\n",
        "Here the matrix of 784 features are the independednt variable and the target labels corresponding to each image are the dependent variables.\n",
        "\n",
        "## . Making test and the training set\n",
        "This is done so that the model trained must have some unseen data to test upon. Therefore 10,000 images are kept aside to test the performance of our modelÂ upon.\n",
        "\n",
        "The MNIST dataset is divided in to 4 parts:\n",
        "\n",
        "## x_train : \n",
        "        The dataset over which the model will be trained upon, it is a set of 60,000 greyscale images. Our Logistic Regression Algorithm will be trained over this data\n",
        "        \n",
        "## y_train :\n",
        "        This is the labelled dataset corresponding to the x_train, this contains the target labels corresponding to the Images of the dataset.\n",
        "        \n",
        "## x_test : \n",
        "        This is the dataset kept aside to test the Machine Learning model trained upon the Dataset x_train, so that out model will have unseen data to predict and test upon.\n",
        "        \n",
        "## y_test :\n",
        "        This is the labelled dataset corresponding to the x_train, this contains the target labels corresponding to the Images of the dataset."
      ]
    },
    {
      "metadata": {
        "id": "HgQdPC6USeiV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import io\n",
        "\n",
        "x_train = pd.read_csv(io.StringIO(train_img.GetContentString())).values\n",
        "y_train = pd.read_csv(io.StringIO(train_label.GetContentString())).values\n",
        "x_test  = pd.read_csv(io.StringIO(test_img.GetContentString())).values\n",
        "y_test  = pd.read_csv(io.StringIO(test_label.GetContentString())).values"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "sY9Mwi4kSeiZ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 3. Feature Scaling:\n",
        "Feature scaling is a method used to standardize the range of independent variables or features of data. In data processing, it is also known as data normalization and is generally performed during the data preprocessing step.\n",
        "\n",
        "### Standardization\n",
        "In machine learning, we can handle various types of data, e.g. audio signals and pixel values for image data, and this data can include multiple dimensions. Feature standardization makes the values of each feature in the data have zero-mean (when subtracting the mean in the numerator) and unit-variance. This method is widely used for normalization in many machine learning algorithms (e.g., support vector machines, logistic regression, and neural networks. The general method of calculation is to determine the distribution mean and standard deviation for each feature. Next we subtract the mean from each feature. Then we divide the values (mean is already subtracted) of each feature by its standard deviation.\n",
        "\n",
        "### Standard Scaler\n",
        "\n",
        "##  $$x'= \\frac{x - mean(x)}{\\sigma}$$\n"
      ]
    },
    {
      "metadata": {
        "id": "EfMrUd2rSeia",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Fitting the Scaler to the x_train\n",
        "so that the scaler can reshape itself to the X_train Dimensions\n"
      ]
    },
    {
      "metadata": {
        "id": "wm4Vi1mXSeia",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "outputId": "0ddc28a9-d87e-400c-d7e2-5e160f70f204"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(x_train)\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
            "  warnings.warn(msg, DataConversionWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StandardScaler(copy=True, with_mean=True, with_std=True)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "metadata": {
        "id": "f-8UwrBnSeif",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Here the warning issued is about the change of values from Interger to Float, which is OKAY for us."
      ]
    },
    {
      "metadata": {
        "id": "rEqnC57FSeig",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Now *implementing* the scalar over the x_train and x_test and transforming them to x_train_scaler and x_test_scaler"
      ]
    },
    {
      "metadata": {
        "id": "1ij0C3paSeii",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "f6010037-6b61-4841-f9ee-c8dce2811625"
      },
      "cell_type": "code",
      "source": [
        "x_train_scaler = scaler.transform(x_train)\n",
        "x_test_scaler = scaler.transform(x_test)\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
            "  warnings.warn(msg, DataConversionWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "zxXx6ejqSeio",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 4. Dimentionality Reduction\n",
        "Having too many features in the training set can make the training process extremely slow and makes it unlikely to get a good solution.\n",
        "In statistics, machine learning, and information theory, dimensionality reduction or dimension reduction is the process of reducing the number of random variables under consideration by obtaining a set of principal variables. It can be divided into feature selection and feature extraction.\n",
        "\n",
        "## Principal component analysis (PCA)\n",
        "The main linear technique for dimensionality reduction, principal component analysis, performs a linear mapping of the data to a lower-dimensional space in such a way that the variance of the data in the low-dimensional representation is maximized."
      ]
    },
    {
      "metadata": {
        "id": "rvrHlTnXSeio",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Ploting the relation between the Variance and the Dimensions"
      ]
    },
    {
      "metadata": {
        "id": "V8wcN7iZSeip",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 637
        },
        "outputId": "e0f7759b-d98e-4b30-964a-364ebb688022"
      },
      "cell_type": "code",
      "source": [
        "#Using elbow-plot variance/dimensions\n",
        "from sklearn.decomposition import PCA\n",
        "pca = PCA()\n",
        "pca.fit(x_test_scaler)\n",
        "cumsum = np.cumsum(pca.explained_variance_ratio_)*100\n",
        "d = [n for n in range(len(cumsum))]\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.plot(d,cumsum, color = 'red',label='cumulative explained variance')\n",
        "plt.title('Cumulative Explained Variance as a Function of the Number of Components')\n",
        "plt.ylabel('Cumulative Explained variance')\n",
        "plt.xlabel('Principal components')\n",
        "plt.axhline(y = 95, color='k', linestyle='--', label = '95% Explained Variance')\n",
        "plt.legend(loc='best')\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fb8b8320748>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmIAAAJbCAYAAABHI/iDAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3XmcTfUfx/HXXWY3YxkzJmQteyhJ\nQnYzEyJKZa0UWSr0kxKyprJklyQkkmhTiRKSkC1rKPs62WZhZu7c5fz+GG4zzYyZEa6ZeT8fj3nM\nved+zzmf873nnnnP2a7JMAwDEREREbnpzJ4uQERERCSvUhATERER8RAFMREREREPURATERER8RAF\nMREREREPURATERER8RAFsTzCMAxmz55NixYtCA8Pp0mTJgwdOpS4uLgbPu/PP/+cp556KtN2a9eu\n5eTJkwCMGzeOTz755LrMv1OnTtStW5eIiIhUPx9//PE1TS+ryxMREcHZs2evaR7pqVSpEsePH081\n7N133+Wll15K0/bQoUNUr16dixcvZnn6UVFRtGjR4j/XmRNMnjyZe++9N8068dNPP133ed2o9fpq\njh07RtOmTWnVqlWa17Zv387evXuBrK/LVzN58mSqVKnC0aNHUw3v1KkTGzdu/E/TvuJ61Jkd8+fP\np06dOkyfPj3Na57clt5MZ8+eZeXKlZ4uI0+weroAuTnGjh3Lb7/9xqxZsyhSpAjx8fGMGjWK7t27\nM3/+fEwmk6dLZM6cOfTo0YOiRYvy8ssvX9dp9+/fP90/SjfS999/f8Pn0aZNGx5++GEuXrxIvnz5\n3MO/+uormjRpkmpYZooUKcI333xzI8q8JYWHhzNq1KgbPp8buV5nZMuWLYSEhLBgwYI0ry1ZsoQa\nNWpQoUKF6za/0NBQ3n77baZOnXrdpulJK1asoE+fPjz22GNpXssJ29LrYePGjfz66680btzY06Xk\netojlgdER0czb9483nrrLYoUKQKAv78/Q4YM4dlnn8UwDF599VWmTZvmHifl80aNGjFv3jweeeQR\nHnjgAVasWMGwYcNo0qQJ7dq1IyYmBoDy5ctz+vRp9zT+/RyS/8vq2rUrERERNGrUiNmzZwMwYcIE\nNmzYQP/+/fnuu+/c83/nnXcYMWKEe/zz589TvXp14uLi+Ouvv+jYsSPh4eG0bNmSnTt3ZrtvduzY\n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\nQmPGjNHFF18cVWMgVS7Pr1q1SpL08MMPq0uXLlE3Btu3b9fMmTM1f/58SZV7B5999ll5vV517dpV\nTz31lCRp8eLF+vDDD2UYhsaPH6/evXvbGTtoioqK9PTTTysvL09ut1vjxo1TYmKipWNAEQMAALAJ\nS5MAAAA2oYgBAADYhCIGAABgE4oYAACATShiAAAANqGIAaiXvXv3qnPnzrrzzjt155136rbbbtPj\njz+uI0eOnPKzOTk5evTRR+t1nTvvvPOkU95rKyMjQyNHjqzXNcPJBx98YHcEAKeBIgag3po3b67F\nixdr8eLFWrZsmZKSkjRnzpxTfi4xMVGvv/56va6xePFiOZ3O040akTwej2bPnm13DACngXtNAgia\nnj17avny5ZKkgQMH+u5dmJaWptTUVP3zn//UxIkTlZSUpF27dmnPnj26+eab9cADD6i0tFRPPfWU\n73ZLjz32mK644gp17NhR3377rebMmaOsrCwVFBQoJydHvXr10sSJE1VcXKwJEybo8OHDKioq0vXX\nX68HH3zQb8affvpJkydPltfrVYMGDTR16lS1atVKs2fP1oYNG+RyudShQwdNmjRJ2dnZeuihh3Tl\nlVdq8+bNatasmYYNG6YPPvhA+/bt02uvvaZOnTpp4MCBSklJ0datW1VQUKCnn35avXr10p49ezRl\nyhSZpim3263HH39cl19+ud8xKC8v1wsvvKD//Oc/KioqUkpKiu699169++67+uKLL+T1erVnzx4l\nJydr1qxZevrpp7Vv3z7de++9mjVrlm9G0u12a8CAAXr44YdD8u8dQP0xIwYgKDwej/7+97/rsssu\n8z13/vnnVzsTlpWVpblz52rhwoWaO3euJGnBggU6++yztWzZMr388stauXLlKb+3e/duzZkzRytW\nrND69eu1c+dO5eXladCgQb5ZubfeekvHjh3zm3PKlCm67777tGTJEt100036+OOP9fXXX2vdunVa\nsmSJli5dqoKCAv3v//6vJGnPnj0aOXKk3n33Xe3Zs0dZWVlauHChUlJStHr1at/rJiQk6O2339ZT\nTz2ladOmSZL++Mc/auTIkVq8eLGee+45TZgwocYx+Otf/6qkpCQtXrxYK1eu1N/+9jft3LlTkvT1\n11/rpZde0rvvvqudO3dqx44dGjt2rJo3b66FCxfqiy++kNvt1tKlS7Vs2TLFx8fL6/XW+t8fAHsw\nIwag3vLz83XnnXdKkrxery6//HLdc889vu9379692t+74oorJEnJyck6duyYPB6PvvnmG9+ervPP\nP1+vvPLKKb/Xq1cvuVyV/7fVuXNn/fDDDxowYIC2bNmiZcuWKSYmRmVlZSfdqPjXvvnmG9/1hw4d\nKkn6y1/+op49eyomJsaXb9u2berZs6eaNWvmuwVWq1at1KNHD0nS2Wefrf379/tet+pGwT169FBm\nZqYkaevWrfrzn/8sSerYsaOOHTum/Px8v2OQkZGhgwcP6ssvv5QklZeX6+eff5YkXXrppYqLi5Mk\nnXPOOSosLFTTpk191+/Ro4def/11jRs3Tv3799ctt9wih4P/1gbOdBQxAPVWtUfMn6pi82tVZaqK\naZoyDCPgDM6J36/6nbffflvl5eV65513ZBiGfvvb3wbM/evrGIZRbR5Jp+xPO/HxiXeIq3rNE3/3\n16974nPVjUFsbKweeeQRXX/99Sd979133z0lx6/vTteiRQt98MEH+vrrr7V+/XrddNNNeu+993zl\nDcCZif9cAnBG6N69uz777DNJlZ/IvPvuu0/5mS+//FIej0fl5eXatm2bOnbsqLy8PLVv316GYWj9\n+vUqLS1VeXm53+v06NHDd52PPvpIM2bMULdu3ZSRkaGKigpJUnp6urp27Vqn/Js2bZIkbdmyRR07\ndpQkde3aVRs3bpQkfffdd0pISFCzZs38vsZll12mjz/+WFJlsZs6dWqNs3sOh0Nut1uStHHjRm3Y\nsEGXXXaZ0tLSFB8fr7y8vDq9BwChx4wYgDPCnXfeqcmTJys1NVVer1fjx48/5WfatGmjcePGae/e\nvRo6dKjat2+vm266SY899pg2btyoQYMG6fe//72eeOKJk/ZjnWjy5MmaPHmyli5dKpfLpZdeeknn\nnHOOhg4dqttvv10Oh0OXXHKJUlJSTlp6DCQ7O1sPPvigDh48qClTpviuNWXKFL3zzjtyu92aPn16\nja9x++23a/fu3br11lvl8Xh09dVXKyEhwe/PJyUlqWXLlrrxxhs1a9YsTZw4UfPnz5fT6VTfvn2V\nnJxc6/wA7GGYv57fBoAz0KxZs+R2u/X//t//szvKKQYOHKhFixapbdu2dkcBEGZYmgQAALAJM2IA\nAAA2YUYMAADAJhQxAAAAm1DEAAAAbEIRAwAAsAlFDAAAwCb/H5fJ6eWdJVzDAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb8bd6bfeb8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "_WeOTDBBSeis",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Applying PCA and Transforming x_train_scaler and x_test_scaler to x_train_pca and x_test_pca respectively"
      ]
    },
    {
      "metadata": {
        "id": "7UAe0BHWSeis",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA\n",
        "pca = PCA(.95) \n",
        "pca.fit(x_train_scaler)\n",
        "\n",
        "x_train_pca = pca.transform(x_train_scaler)\n",
        "x_test_pca = pca.transform(x_test_scaler)\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZFZwIx6ASeix",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Here the the min Variance is set to 95%, therefore the the minimum dimentions are chosen keeping the stated Variance."
      ]
    },
    {
      "metadata": {
        "id": "Aa_KLv87Seiy",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Comparing the images before and after applying the PCA"
      ]
    },
    {
      "metadata": {
        "id": "cXDC3oJpSeiz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "57f6a79a-18a7-4962-ba19-ba03e9ed763c"
      },
      "cell_type": "code",
      "source": [
        "sample = x_train[23]\n",
        "sample.shape = (28,28)\n",
        "\n",
        "\n",
        "a = plt.subplot(1,2,1)\n",
        "a.set_title('Original Image')\n",
        "plt.imshow(sample, cmap = plt.cm.gray_r)\n",
        "\n",
        "sample = pca.inverse_transform(x_train_pca[23])\n",
        "sample.shape = (28,28)\n",
        "\n",
        "b = plt.subplot(1,2,2)\n",
        "b.set_title(\"Reduced after PCA\")\n",
        "plt.imshow(sample, cmap = plt.cm.gray_r)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7fb8b8215358>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb8b82ab7f0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "W0vSoYGiJfla",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 5.Implementing the models"
      ]
    },
    {
      "metadata": {
        "id": "20pn3T4ISei3",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### 5.1. Logistic Regression:\n",
        "logistic regression is a regression model where the dependent variable (DV) is categorical, where the output can take only two values, \"0\" and \"1\", which represent outcomes such as pass/fail, win/lose, alive/dead or healthy/sick. Cases where the dependent variable has more than two outcome categories may be analysed in multinomial logistic regression.\n",
        "\n",
        "### Applying the Logistic Regression model:"
      ]
    },
    {
      "metadata": {
        "id": "CDCYFx0fSei4",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### GridSearch Cross Validation\n",
        "In machine learning, two tasks are commonly done at the same time in data pipelines: cross validation and (hyper)parameter tuning. Cross validation is the process of training learners using one set of data and testing it using a different set. Parameter tuning is the process to selecting the values for a modelâs parameters that maximize the accuracy of the model."
      ]
    },
    {
      "metadata": {
        "id": "N_SzBXgySei4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 717
        },
        "outputId": "193fdbc2-55d2-42cf-a174-a6fef4c8a6fc"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# making skeletal model\n",
        "logistic_regression = LogisticRegression(solver = 'lbfgs')\n",
        "\n",
        "# Set of parameters we want to try for out Model\n",
        "parameters = { 'C' : [0.1, 0.09, 0.11]}\n",
        "\n",
        "#Running the Model with above chosen parameter\n",
        "grid_search = GridSearchCV(estimator = logistic_regression, param_grid = parameters , scoring = 'accuracy', cv = 3, verbose = 2, n_jobs = -1)\n",
        "grid_scores = grid_search.fit(x_train_pca , y_train)\n"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 3 folds for each of 3 candidates, totalling 9 fits\n",
            "[CV] C=0.1 ...........................................................\n",
            "[CV] C=0.1 ...........................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ............................................ C=0.1, total= 1.1min\n",
            "[CV] C=0.1 ...........................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ............................................ C=0.1, total= 1.1min\n",
            "[CV] C=0.09 ..........................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ............................................ C=0.1, total= 1.1min\n",
            "[CV] C=0.09 ..........................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ........................................... C=0.09, total= 1.1min\n",
            "[CV] C=0.09 ..........................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ........................................... C=0.09, total= 1.1min\n",
            "[CV] C=0.11 ..........................................................\n",
            "[CV] ........................................... C=0.09, total= 1.1min\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] C=0.11 ..........................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ........................................... C=0.11, total= 1.1min\n",
            "[CV] C=0.11 ..........................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ........................................... C=0.11, total= 1.1min\n",
            "[CV] ........................................... C=0.11, total=  32.3s\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done   9 out of   9 | elapsed:  5.1min finished\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "-xh3N51ySei9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "6962b217-8daa-4834-b9b7-7560021547e4"
      },
      "cell_type": "code",
      "source": [
        "print( grid_search.best_score_)\n",
        "print(grid_search.best_params_)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9146485774762912\n",
            "{'C': 0.1}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "_ADtqKNCSejC",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### As the best Hyper parameter turns out to be C = 0.1\n",
        "#### The final model should be made with the above mentioned Hyper-parameters\n",
        "         "
      ]
    },
    {
      "metadata": {
        "id": "T2d3CXEqSejD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        },
        "outputId": "5ff7698f-811b-46da-8476-13ea54ddfb8e"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "train_time = []\n",
        "# Making the Final Classification model.\n",
        "logistic_regression = LogisticRegression(solver = 'lbfgs', C = 0.1)\n",
        "tick = time.time()\n",
        "logistic_regression.fit(x_train_pca, y_train)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print(\"Time taken for training a Logistic Regression model = \" + str(algo_time))\n",
        "train_time.append(algo_time)\n",
        "print(train_time)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time taken for training a Logistic Regression model = 45.971176862716675\n",
            "[45.971176862716675]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "Ds9kVuRPSejd",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "####  Predicting values on the Test Set"
      ]
    },
    {
      "metadata": {
        "id": "eIuinFqFSejd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "21589e60-d271-4d26-c227-f275c04d89e3"
      },
      "cell_type": "code",
      "source": [
        "prediction_time = []\n",
        "tick = time.time()\n",
        "lr_test_predict=logistic_regression.predict(x_test_pca)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print('time taken to predict the test values is :' + str(algo_time))\n",
        "prediction_time.append(algo_time)\n",
        "print(prediction_time)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time taken to predict the test values is :0.021033287048339844\n",
            "[0.021033287048339844]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "bXhocdfOSejm",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Accuracy on Test Set"
      ]
    },
    {
      "metadata": {
        "id": "oIsBqZzfSejn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "c5cd5c2a-6e13-4574-91c7-d70cfb99e066"
      },
      "cell_type": "code",
      "source": [
        "accuracy = []\n",
        "algo_score = logistic_regression.score(x_test_pca, y_test)\n",
        "print('the Accuracy on the test set comes out to be : ' + str(algo_score))\n",
        "accuracy.append(algo_score)\n",
        "print (algo_score)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the Accuracy on the test set comes out to be : 0.922092209220922\n",
            "0.922092209220922\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "6SMyU6CwSeja",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Finding F1 Score on the test set and looking at the Classification Report.\n",
        "**True Positives (TP) - **\n",
        "These are the correctly predicted positive values which means that the value of actual class is yes and the value of predicted class is also yes. E.g. if actual class value indicates that this passenger survived and predicted class tells you the same thing.\n",
        "\n",
        " **True Negatives (TN) - **\n",
        "These are the correctly predicted negative values which means that the value of actual class is no and value of predicted class is also no. E.g. if actual class says this passenger did not survive and predicted class tells you the same thing.\n",
        "\n",
        "False positives and false negatives, these values occur when your actual class contradicts with the predicted class.\n",
        "\n",
        "**False Positives (FP) â**\n",
        "When actual class is no and predicted class is yes. E.g. if actual class says this passenger did not survive but predicted class tells you that this passenger will survive.\n",
        "\n",
        "**False Negatives (FN) â**\n",
        "When actual class is yes but predicted class in no. E.g. if actual class value indicates that this passenger survived and predicted class tells you that passenger will die.\n",
        "\n",
        "Once you understand these four parameters then we can calculate Accuracy, Precision, Recall and F1 score.\n",
        "\n",
        "**F1 Score**\n",
        "In statistical analysis of binary classification, the F1 score (also F-score or F-measure) is a measure of a test's accuracy. It considers both the precision p and the recall r of the test to compute the score: p is the number of correct positive results divided by the number of all positive results returned by the classifier, and r is the number of correct positive results divided by the number of all relevant samples (all samples that should have been identified as positive). The F1 score is the harmonic average of the precision and recall, where an F1 score reaches its best value at 1 (perfect precision and recall) and worst at 0.\n",
        "\n",
        " ### $$F1 =\\frac{2}{\\frac{1}{Precision} + \\frac{1} {Recall} }$$"
      ]
    },
    {
      "metadata": {
        "id": "mMl3x0j-Sejr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "outputId": "ae513427-ea82-44ce-c12e-f36b16b047fb"
      },
      "cell_type": "code",
      "source": [
        "f1_score = []\n",
        "import sklearn.metrics as skm\n",
        "print(skm.classification_report( y_test , lr_test_predict ))\n",
        "algo_f1 = skm.f1_score(y_test, lr_test_predict, average = 'weighted' )\n",
        "f1_score.append(algo_f1)\n",
        "print(f1_score)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "             precision    recall  f1-score   support\n",
            "\n",
            "          0       0.95      0.98      0.96       980\n",
            "          1       0.96      0.98      0.97      1135\n",
            "          2       0.94      0.89      0.91      1032\n",
            "          3       0.91      0.92      0.91      1010\n",
            "          4       0.92      0.93      0.93       982\n",
            "          5       0.90      0.87      0.88       892\n",
            "          6       0.94      0.95      0.94       958\n",
            "          7       0.93      0.92      0.93      1027\n",
            "          8       0.87      0.88      0.87       974\n",
            "          9       0.91      0.89      0.90      1009\n",
            "\n",
            "avg / total       0.92      0.92      0.92      9999\n",
            "\n",
            "[0.9218857746431911]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "GeDg95b8Sejt",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "F1 score comes out to be above 0.9, i,e, model is reasonably good."
      ]
    },
    {
      "metadata": {
        "id": "4zgnzQrLiiP-",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### 5.2 K-Nearest Neighbors:\n",
        "In pattern recognition, the k-nearest neighbors algorithm (k-NN) is a non-parametric method used for classification and regression. In both cases, the input consists of the k closest training examples in the feature space. The output depends on whether k-NN is used for classification or regression:\n",
        "In k-NN classification, the output is a class membership. An object is classified by a majority vote of its neighbors, with the object being assigned to the class most common among its k nearest neighbors (k is a positive integer, typically small). If k = 1, then the object is simply assigned to the class of that single nearest neighbor.\n",
        "k-NN is a type of instance-based learning, or lazy learning, where the function is only approximated locally and all computation is deferred until classification. The k-NN algorithm is among the simplest of all machine learning algorithms.\n",
        "\n",
        "### Implementing KNN"
      ]
    },
    {
      "metadata": {
        "id": "Hz30zkVfXt6G",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        },
        "outputId": "4b1879f4-11ac-4d13-8a0d-61b577d14797"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "# making model\n",
        "classifier = KNeighborsClassifier()\n",
        "tick = time.time()\n",
        "classifier.fit(x_train_pca, y_train)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print(\"Time taken for training a KNN = \" + str(algo_time))\n",
        "train_time.append(algo_time)\n",
        "print(train_time)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time taken for training a KNN = 2.0588316917419434\n",
            "[45.971176862716675, 2.0588316917419434]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "FrrUap1uny7m",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Predicting Values on Test Set"
      ]
    },
    {
      "metadata": {
        "id": "yPTzRD4kXt02",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "5c7cb857-81cf-4065-d85d-66beacc6cba9"
      },
      "cell_type": "code",
      "source": [
        "knn_test_predict = classifier.predict(x_test_pca)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print('time taken to predict the test values is :' + str(algo_time))\n",
        "prediction_time.append(algo_time)\n",
        "print(prediction_time)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time taken to predict the test values is :503.7102689743042\n",
            "[0.021033287048339844, 503.7102689743042]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "E6icMhG3oT2W",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Accuracy on the Test Set"
      ]
    },
    {
      "metadata": {
        "id": "qT8ztAEdoXBm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "9910acdb-6e39-498a-e823-0e166a57bc01"
      },
      "cell_type": "code",
      "source": [
        "algo_score = classifier.score(x_test_pca, y_test)\n",
        "print('the Accuracy on the test set comes out to be : ' + str(algo_score))\n",
        "accuracy.append(algo_score)\n",
        "print (algo_score)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the Accuracy on the test set comes out to be : 0.9484948494849484\n",
            "0.9484948494849484\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "-ekhZJnopW4a",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Printing F1 Score and The Classification Report"
      ]
    },
    {
      "metadata": {
        "id": "VP56KUIuqUnt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "outputId": "16c5c299-fecd-4f30-a306-ac395fabce1a"
      },
      "cell_type": "code",
      "source": [
        "import sklearn.metrics as skm\n",
        "print(skm.classification_report( y_test , knn_test_predict ))\n",
        "algo_f1 = skm.f1_score(y_test, knn_test_predict, average = 'weighted' )\n",
        "f1_score.append(algo_f1)\n",
        "print(f1_score)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "             precision    recall  f1-score   support\n",
            "\n",
            "          0       0.95      0.99      0.97       980\n",
            "          1       0.96      0.99      0.98      1135\n",
            "          2       0.96      0.94      0.95      1032\n",
            "          3       0.93      0.96      0.95      1010\n",
            "          4       0.95      0.94      0.95       982\n",
            "          5       0.94      0.93      0.93       892\n",
            "          6       0.96      0.97      0.97       958\n",
            "          7       0.94      0.93      0.93      1027\n",
            "          8       0.96      0.91      0.93       974\n",
            "          9       0.93      0.92      0.92      1009\n",
            "\n",
            "avg / total       0.95      0.95      0.95      9999\n",
            "\n",
            "[0.9218857746431911, 0.9483233169682831]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "OT87E1nEriEx",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "The F1 Score comes out to be 0.95"
      ]
    },
    {
      "metadata": {
        "id": "CaCHvhINrtsx",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### 5.3 Support Vector Machine:\n",
        "It is a machine learning approach used for classification and regression analysis. It depends on supervised learning models and trained by learning algorithms. They analyze the large amount of data to identify patterns from them.\n",
        "An SVM generates parallel partitions by generating two parallel lines. For each category of data in a high-dimensional space and uses almost all attributes. It separates the space in a single pass to generate flat and linear partitions. Divide the 2 categories by a clear gap that should be as wide as possible. Do this partitioning by a plane called hyperplane.\n",
        "An SVM creates hyperplanes that have the largest margin in a high-dimensional space to separate given data into classes. The margin between the 2 classes represents the longest distance between closest data points of those classes.\n",
        "The larger the margin, the lower is the generalization error of the classifier.\n",
        "After training map the new data to same space to predict which category they belong to. Categorize the new data into different partitions and achieve it by training data.\n",
        "Of all the available classifiers, SVM provides the largest flexibility.\n",
        "SVMs are like probabilistic approaches but do not consider dependencies among attributes.\n",
        "\n",
        "### Implementing the SVM Model"
      ]
    },
    {
      "metadata": {
        "id": "hBduEzU7XtvW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 717
        },
        "outputId": "a1f27542-8746-4ba2-f24e-6997e2288117"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "# making skeletal model\n",
        "classifier = SVC()\n",
        "\n",
        "# Set of parameters we want to try for out Model\n",
        "parameters = { 'C' : [0.1, 1, 10],\n",
        "               'kernel'   : ['poly']}\n",
        "\n",
        "#Running the Model with above chosen parameter\n",
        "grid_search = GridSearchCV(estimator = classifier, param_grid = parameters , scoring = 'accuracy', cv = 3, verbose = 2, n_jobs = -1)\n",
        "grid_scores = grid_search.fit(x_train_pca , y_train)\n"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 3 folds for each of 3 candidates, totalling 9 fits\n",
            "[CV] C=0.1, kernel=poly ..............................................\n",
            "[CV] C=0.1, kernel=poly ..............................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ............................... C=0.1, kernel=poly, total=13.2min\n",
            "[CV] C=0.1, kernel=poly ..............................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ............................... C=0.1, kernel=poly, total=13.3min\n",
            "[CV] C=1, kernel=poly ................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ................................. C=1, kernel=poly, total= 7.6min\n",
            "[CV] C=1, kernel=poly ................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ............................... C=0.1, kernel=poly, total=13.1min\n",
            "[CV] C=1, kernel=poly ................................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ................................. C=1, kernel=poly, total= 7.4min\n",
            "[CV] C=10, kernel=poly ...............................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ................................. C=1, kernel=poly, total= 7.5min\n",
            "[CV] C=10, kernel=poly ...............................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ................................ C=10, kernel=poly, total= 7.0min\n",
            "[CV] C=10, kernel=poly ...............................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] ................................ C=10, kernel=poly, total= 6.9min\n",
            "[CV] ................................ C=10, kernel=poly, total= 7.0min\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done   9 out of   9 | elapsed: 67.3min finished\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "6ptcmo_buef8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "72e177b4-dab8-4a0e-834d-4ba8b52b94e6"
      },
      "cell_type": "code",
      "source": [
        "print( grid_search.best_score_)\n",
        "print(grid_search.best_params_)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9754162569376156\n",
            "{'C': 10, 'kernel': 'poly'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "L9NNU-lqudqh",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### The final model should be made with the above mentioned Hyper-parameters\n",
        "         "
      ]
    },
    {
      "metadata": {
        "id": "oTr7OGat8WgA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        },
        "outputId": "dbfc32b5-15e0-47be-e17a-8df3e607916a"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "# Making the Final Classification model.\n",
        "classifier = SVC( C= 10, kernel = 'poly')\n",
        "tick = time.time()\n",
        "classifier.fit(x_train_pca, y_train)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print(\"Time taken for training a SVM = \" + str(algo_time))\n",
        "train_time.append(algo_time)\n",
        "print(train_time)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time taken for training a SVM = 469.27832078933716\n",
            "[45.971176862716675, 2.0588316917419434, 469.27832078933716]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "HQ4tOGsC9Uzk",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Predicting Values on Test Set\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "H_d7dVMP9quI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "67eaf349-4d5e-4d11-e38c-ffe3455b0ff9"
      },
      "cell_type": "code",
      "source": [
        "svm_predict = classifier.predict(x_test_pca)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print('time taken to predict the test values is :' + str(algo_time))\n",
        "prediction_time.append(algo_time)\n",
        "print(prediction_time)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time taken to predict the test values is :551.7381176948547\n",
            "[0.021033287048339844, 503.7102689743042, 551.7381176948547]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "PNiWGuM79z6d",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Accuracy on the Test Set"
      ]
    },
    {
      "metadata": {
        "id": "RBB8sgPJ96Oz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "33a8f404-baf9-498b-cc3b-5b72dafed103"
      },
      "cell_type": "code",
      "source": [
        "algo_score = classifier.score(x_test_pca, y_test)\n",
        "print('the Accuracy on the test set comes out to be : ' + str(algo_score))\n",
        "accuracy.append(algo_score)\n",
        "print (algo_score)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the Accuracy on the test set comes out to be : 0.9781978197819782\n",
            "0.9781978197819782\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "J87S8wzX-B4v",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Printing F1 Score and The Classification Report"
      ]
    },
    {
      "metadata": {
        "id": "RfPGlWTh-FLy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "outputId": "8300669f-8e4c-421b-cb01-8e5f3cb3bc13"
      },
      "cell_type": "code",
      "source": [
        "import sklearn.metrics as skm\n",
        "print(skm.classification_report( y_test , svm_predict ))\n",
        "algo_f1 = skm.f1_score(y_test, svm_predict, average = 'weighted' )\n",
        "f1_score.append(algo_f1)\n",
        "print(f1_score)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "             precision    recall  f1-score   support\n",
            "\n",
            "          0       0.99      0.99      0.99       980\n",
            "          1       0.99      1.00      0.99      1135\n",
            "          2       0.97      0.98      0.98      1032\n",
            "          3       0.98      0.98      0.98      1010\n",
            "          4       0.97      0.98      0.98       982\n",
            "          5       0.97      0.97      0.97       892\n",
            "          6       0.98      0.98      0.98       958\n",
            "          7       0.98      0.97      0.98      1027\n",
            "          8       0.96      0.97      0.97       974\n",
            "          9       0.98      0.96      0.97      1009\n",
            "\n",
            "avg / total       0.98      0.98      0.98      9999\n",
            "\n",
            "[0.9218857746431911, 0.9483233169682831, 0.9781906007667261]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "CWeVOMHM-YEe",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "F1 Score turn out to be 0.98"
      ]
    },
    {
      "metadata": {
        "id": "WhfHccvu6aRr",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### 5.4 Naives Baye's:\n",
        "Naive Bayes classifiers are highly scalable, requiring a number of parameters linear in the number of variables (features/predictors) in a learning problem. Maximum-likelihood training can be done by evaluating a closed-form expression, which takes linear time, rather than by expensive iterative approximation as used for many other types of classifiers.\n",
        "\n",
        "In the statistics and computer science literature, naive Bayes models are known under a variety of names, including simple Bayes and independence Bayes.All these names reference the use of Bayes' theorem in the classifier's decision rule, but naive Bayes is not (necessarily) a Bayesian method.\n",
        "###### MNIST dataset in a Multivariate Classification problem with 10 classes ( 0, 1, 2, ... , 9)\n",
        "\n",
        "### Applying the Naive Baye's:"
      ]
    },
    {
      "metadata": {
        "id": "Rtk_P0Md7G7o",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        },
        "outputId": "a6e3c74f-294a-4ece-d31c-97528b70fbd7"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes  import GaussianNB\n",
        "\n",
        "classifier = GaussianNB()\n",
        "\n",
        "# Making the Final Classification model.\n",
        "tick = time.time()\n",
        "classifier.fit(x_train_pca, y_train)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print(\"Time taken for training a Naive Bayes = \" + str(algo_time))\n",
        "train_time.append(algo_time)\n",
        "print(train_time)\n"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time taken for training a Naive Bayes = 0.792243480682373\n",
            "[45.971176862716675, 2.0588316917419434, 469.27832078933716, 0.792243480682373]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "LbsgJj5mAT3E",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Predicting Values on Test Set\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "8HTX-1qEAVOU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "bfc4ceda-1f28-452d-c7fb-f10708bb9d5e"
      },
      "cell_type": "code",
      "source": [
        "nb_predict = classifier.predict(x_test_pca)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print('time taken to predict the test values is :' + str(algo_time))\n",
        "prediction_time.append(algo_time)\n",
        "print(prediction_time)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time taken to predict the test values is :2.3547520637512207\n",
            "[0.021033287048339844, 503.7102689743042, 551.7381176948547, 2.3547520637512207]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "IS9dMYyHAhv9",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Accuracy on the Test Set"
      ]
    },
    {
      "metadata": {
        "id": "53OO-BF-Aiqp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "b2746e7c-bf0b-4f0e-dcb8-1ab21a8cffbf"
      },
      "cell_type": "code",
      "source": [
        "algo_score = classifier.score(x_test_pca, y_test)\n",
        "print('the Accuracy on the test set comes out to be : ' + str(algo_score))\n",
        "accuracy.append(algo_score)\n",
        "print (algo_score)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the Accuracy on the test set comes out to be : 0.45514551455145513\n",
            "0.45514551455145513\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "iUiCILM_AqoP",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Printing F1 Score and The Classification Report"
      ]
    },
    {
      "metadata": {
        "id": "3kLmP2TYAuF8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "outputId": "b105a11e-bd13-47ee-f060-7d6465404130"
      },
      "cell_type": "code",
      "source": [
        "import sklearn.metrics as skm\n",
        "print(skm.classification_report( y_test , nb_predict ))\n",
        "algo_f1 = skm.f1_score(y_test, nb_predict, average = 'weighted' )\n",
        "f1_score.append(algo_f1)\n",
        "print(f1_score)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "             precision    recall  f1-score   support\n",
            "\n",
            "          0       0.31      0.93      0.46       980\n",
            "          1       0.77      0.95      0.85      1135\n",
            "          2       0.46      0.31      0.37      1032\n",
            "          3       0.52      0.12      0.20      1010\n",
            "          4       0.34      0.84      0.49       982\n",
            "          5       0.53      0.16      0.25       892\n",
            "          6       0.91      0.23      0.37       958\n",
            "          7       0.74      0.16      0.27      1027\n",
            "          8       0.49      0.58      0.53       974\n",
            "          9       0.49      0.19      0.27      1009\n",
            "\n",
            "avg / total       0.56      0.46      0.41      9999\n",
            "\n",
            "[0.9218857746431911, 0.9483233169682831, 0.9781906007667261, 0.4128814136374133]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "bXhDmN1QA5L4",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "The F1 Score Comes out to be 0.41"
      ]
    },
    {
      "metadata": {
        "id": "c3vKV4NhBeW9",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### 5.5 Decision Tree:\n",
        "A decision tree is a decision support tool that uses a tree-like graph or model of decisions and their possible consequences, including chance event outcomes, resource costs, and utility. It is one way to display an algorithm that only contains conditional control statements.\n",
        "\n",
        "Decision trees are commonly used in operations research, specifically in decision analysis, to help identify a strategy most likely to reach a goal, but are also a popular tool in machine learning.\n",
        "\n",
        "\n",
        "## Applying the Decision Tree model:"
      ]
    },
    {
      "metadata": {
        "id": "zlmmrNT4BmdE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        },
        "outputId": "d1c935c6-0b35-49be-a33f-9b731eb03baf"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "# making skeletal model\n",
        "classifier = DecisionTreeClassifier()\n",
        "\n",
        "# Set of parameters we want to try for out Model\n",
        "parameters = { 'min_samples_split' : [8,10,12],\n",
        "               'criterion'   : ['gini','entropy']}\n",
        "\n",
        "#Running the Model with above chosen parameter\n",
        "grid_search = GridSearchCV(estimator = classifier, param_grid = parameters , scoring = 'accuracy', cv = 3, verbose = 2, n_jobs = -1)\n",
        "grid_scores = grid_search.fit(x_train_pca , y_train)\n"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 3 folds for each of 6 candidates, totalling 18 fits\n",
            "[CV] criterion=gini, min_samples_split=8 .............................\n",
            "[CV] criterion=gini, min_samples_split=8 .............................\n",
            "[CV] .............. criterion=gini, min_samples_split=8, total=  57.8s\n",
            "[CV] criterion=gini, min_samples_split=8 .............................\n",
            "[CV] .............. criterion=gini, min_samples_split=8, total=  59.0s\n",
            "[CV] criterion=gini, min_samples_split=10 ............................\n",
            "[CV] ............. criterion=gini, min_samples_split=10, total=  57.3s\n",
            "[CV] criterion=gini, min_samples_split=10 ............................\n",
            "[CV] .............. criterion=gini, min_samples_split=8, total=  59.9s\n",
            "[CV] criterion=gini, min_samples_split=10 ............................\n",
            "[CV] ............. criterion=gini, min_samples_split=10, total=  58.3s\n",
            "[CV] criterion=gini, min_samples_split=12 ............................\n",
            "[CV] ............. criterion=gini, min_samples_split=10, total=  59.3s\n",
            "[CV] criterion=gini, min_samples_split=12 ............................\n",
            "[CV] ............. criterion=gini, min_samples_split=12, total=  57.2s\n",
            "[CV] criterion=gini, min_samples_split=12 ............................\n",
            "[CV] ............. criterion=gini, min_samples_split=12, total=  59.0s\n",
            "[CV] criterion=entropy, min_samples_split=8 ..........................\n",
            "[CV] ............. criterion=gini, min_samples_split=12, total=  56.6s\n",
            "[CV] criterion=entropy, min_samples_split=8 ..........................\n",
            "[CV] ........... criterion=entropy, min_samples_split=8, total= 2.3min\n",
            "[CV] criterion=entropy, min_samples_split=8 ..........................\n",
            "[CV] ........... criterion=entropy, min_samples_split=8, total= 2.3min\n",
            "[CV] criterion=entropy, min_samples_split=10 .........................\n",
            "[CV] ........... criterion=entropy, min_samples_split=8, total= 2.3min\n",
            "[CV] criterion=entropy, min_samples_split=10 .........................\n",
            "[CV] .......... criterion=entropy, min_samples_split=10, total= 2.3min\n",
            "[CV] criterion=entropy, min_samples_split=10 .........................\n",
            "[CV] .......... criterion=entropy, min_samples_split=10, total= 2.3min\n",
            "[CV] criterion=entropy, min_samples_split=12 .........................\n",
            "[CV] .......... criterion=entropy, min_samples_split=10, total= 2.3min\n",
            "[CV] criterion=entropy, min_samples_split=12 .........................\n",
            "[CV] .......... criterion=entropy, min_samples_split=12, total= 2.3min\n",
            "[CV] criterion=entropy, min_samples_split=12 .........................\n",
            "[CV] .......... criterion=entropy, min_samples_split=12, total= 2.3min\n",
            "[CV] .......... criterion=entropy, min_samples_split=12, total= 1.8min\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Done  18 out of  18 | elapsed: 14.9min finished\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "J0K0iOQQEPnp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "3489dfbe-ecc9-48a6-e608-0a3dfcec0c5c"
      },
      "cell_type": "code",
      "source": [
        "print( grid_search.best_score_)\n",
        "print(grid_search.best_params_)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8225137085618094\n",
            "{'criterion': 'entropy', 'min_samples_split': 12}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "WRzESR-zEK0k",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "\n",
        "#### The final model should be made with the above mentioned Hyper-parameters\n",
        "         "
      ]
    },
    {
      "metadata": {
        "id": "i0I0JdNbEbOo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "4511b3fd-a84c-4b21-dca1-de363552f0a2"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "# Making the Final Classification model.\n",
        "classifier = DecisionTreeClassifier(criterion = 'entropy', min_samples_split = 12 )\n",
        "tick = time.time()\n",
        "classifier.fit(x_train_pca, y_train)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print(\"Time taken for training a Decision Tree = \" + str(algo_time))\n",
        "train_time.append(algo_time)\n",
        "print(train_time)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Time taken for training a Decision Tree = 146.40933847427368\n",
            "[45.971176862716675, 2.0588316917419434, 469.27832078933716, 0.792243480682373, 146.40933847427368]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "VjlgY-XeEnue",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Predicting Values on Test Set\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "1y9xLpjjEvEY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "1f187535-8eb3-4849-d855-390cfa636bed"
      },
      "cell_type": "code",
      "source": [
        "dt_predict = classifier.predict(x_test_pca)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print('time taken to predict the test values is :' + str(algo_time))\n",
        "prediction_time.append(algo_time)\n",
        "print(prediction_time)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time taken to predict the test values is :147.8577642440796\n",
            "[0.021033287048339844, 503.7102689743042, 551.7381176948547, 2.3547520637512207, 147.8577642440796]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "gnq1eRTpE1fa",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Accuracy on the Test Set"
      ]
    },
    {
      "metadata": {
        "id": "430Ia80EE-pq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "e50b481e-48cf-4b60-8c67-da5c435e486b"
      },
      "cell_type": "code",
      "source": [
        "algo_score = classifier.score(x_test_pca, y_test)\n",
        "print('the Accuracy on the test set comes out to be : ' + str(algo_score))\n",
        "accuracy.append(algo_score)\n",
        "print (algo_score)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the Accuracy on the test set comes out to be : 0.8336833683368337\n",
            "0.8336833683368337\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "6FTtA6yyFENh",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#### Printing F1 Score and The Classification Report"
      ]
    },
    {
      "metadata": {
        "id": "5LduzsQ7FOHN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "outputId": "7bde4495-5b80-439f-982d-74f7d4c53aec"
      },
      "cell_type": "code",
      "source": [
        "import sklearn.metrics as skm\n",
        "print(skm.classification_report( y_test , dt_predict ))\n",
        "algo_f1 = skm.f1_score(y_test, dt_predict, average = 'weighted' )\n",
        "f1_score.append(algo_f1)\n",
        "print(f1_score)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "             precision    recall  f1-score   support\n",
            "\n",
            "          0       0.89      0.91      0.90       980\n",
            "          1       0.95      0.97      0.96      1135\n",
            "          2       0.84      0.81      0.82      1032\n",
            "          3       0.77      0.80      0.78      1010\n",
            "          4       0.83      0.83      0.83       982\n",
            "          5       0.77      0.78      0.78       892\n",
            "          6       0.90      0.89      0.89       958\n",
            "          7       0.83      0.84      0.83      1027\n",
            "          8       0.77      0.74      0.76       974\n",
            "          9       0.77      0.76      0.76      1009\n",
            "\n",
            "avg / total       0.83      0.83      0.83      9999\n",
            "\n",
            "[0.9218857746431911, 0.9483233169682831, 0.9781906007667261, 0.4128814136374133, 0.8334487323856059]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "ZnCCxwJ5Pepx",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "The F1 score comes out to be. 0.83\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "ipgnUyczH6nm",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Visualising the results"
      ]
    },
    {
      "metadata": {
        "id": "49BmkVhnJtMN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "495eeb9e-c70e-46df-aa82-5e903989de74"
      },
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame({       'Accuracy'        : accuracy,\n",
        "                          'Train_Time'      : train_time,\n",
        "                          'Prediction_time' : prediction_time,\n",
        "                          'F1'              : f1_score,\n",
        "                          'Algorithm'       : ['Logistic Regression','KNN','SVM','Naive Bayes','Decision Tree']})\n",
        "print(df)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   Accuracy            Algorithm        F1  Prediction_time  Train_Time\n",
            "0  0.922092  Logistic Regression  0.921886         0.021033   45.971177\n",
            "1  0.948495                  KNN  0.948323       503.710269    2.058832\n",
            "2  0.978198                  SVM  0.978191       551.738118  469.278321\n",
            "3  0.455146          Naive Bayes  0.412881         2.354752    0.792243\n",
            "4  0.833683        Decision Tree  0.833449       147.857764  146.409338\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "0dV4C7GqOvY3",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## On the basis of Accuracy"
      ]
    },
    {
      "metadata": {
        "id": "BIboY0I5FH44",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "outputId": "0e79b56a-fee6-49a5-8251-14aa27b1efd4"
      },
      "cell_type": "code",
      "source": [
        "sns.barplot('Algorithm','Accuracy', data = df)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py:1428: FutureWarning: remove_na is deprecated and is a private function. Do not use.\n",
            "  stat_data = remove_na(group_data)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb8b81afa58>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n7NmSrn6Fbu7cuVq+fLkSExNt2x4/flzLly9X3bp19cYbb2jlypVatWqVfv31Vx08eFDbt29Xq1at\nFBUVpUmTJik9Pb3IedckJyfro48+UnR0tKKjo7V161b98ssvkqTc3FwtX75cgwYN0oYNG27738AI\n1y5wnTt3lp+fn21+hQoV9PTTT+vNN98scrsXX3xRixYtuu1R/cq7+vXrq1GjRmrfvr3Gjx+vLVu2\nKC8vT127drWN0ZCfn6///ve/6tChg227Tp06afPmzZKkLVu2qGPHjmVSf2kp6v2Uk5OjmjVrKiYm\nRqtXr9ZrrxUceTAkJEQ7d+6UJH3++efq2LFjsdeDP5swYYLCw8P1xBNPqE+fPnJzc1NWVpZat26t\nVatW6bXXXtOSJUvk5+en3NxcnT59WpL0xRdfqEuXLpo5c6ZmzJih999/X0FBQYqOjtbx48eVmZmp\n6OhoLV++XFlZWQadrVsTEBCgEydOKDk5Wdu2bVNMTIyio6P16aefKjU1VcuXL1fr1q21evVqtWzZ\nskA3e1xcnO6//35FRUVp3rx5Onv2rG3ZhQsXtHDhQr333nuKiYnRqVOntHfvXknS6dOntWzZMk2a\nNElr1661u9bExETNmzdPjz/+uGbNmqX//d//1cqVK1W1alVt27ZNBw4cUEpKiqKjo7Vy5Uq98cYb\n+uOPP+7cyfo/5aLlffLkSTVu3FiS9Oijj+r1119XpUqV1LRpU0lScHCwnJwKvtT27dtr+vTp+vnn\nn9WlSxf5+fnp0KFDhfadkJBg++u4a9euRR5/y5YtOnLkiHJycpSRkaHJkyeratWq+uabb3Tw4EF9\n/fXXkq7+wufm5iolJUUNGzaUJLVp00ZXrlyRJP3tb3+Ti4uLEhMTlZqaavvu+/nz55WamqqgoCAN\nHz5c58+fV6dOndSkSRNVrly50Lwff/xR0tU3WePGjW2vvWnTprbP7wIDAyVJPj4+hR7Xerf46aef\nNH78eL3//vvq2bOnfHx8bMuefPJJ9evXr8gWX506ddSwYUNbjwOKN3fuXJ08eVK7du3SO++8o5iY\nGK1cuVIeHh46duyYsrKy1LBhQ9sAS9LV352wsDCNHDlS8fHxmjhxYhm+AuMV9X6qUKGCsrKyFBYW\nJmdnZ2VmZhbYpmPHjpozZ44GDBigzz//XNOnT9eKFSuKvB64uLgU2DYyMlIPPfSQcnNzNXz4cDVo\n0EDNmjXTd999p7Vr18rBwUHnzp2TJPXo0UNbt25Vly5d5ObmpmrVqunw4cOaMmWKpKt/pD/88MN6\n8MEHdeHCBY0ZM0YdOnQo9lpWVq71Mnz33XdKSkrSoEGDbPNTUlL0/fffa9SoUZKkf/7zn5Jka/j8\n/e9/16JFizR16lR17NhRbdr0EUV9AAAKXElEQVS00b59+yRJP//8sx544AG5urpKkpo3b27b7lo+\n+Pj46Pz583bXWqtWLXl4eCgjI0NJSUm2HqqLFy/Kw8NDp0+f1qFDhxQeHi7p6h/A6enpqlWr1u2c\nokLKRXhf7/Lly3JwcJDVapWjo6MkyWKxFFqvZcuWWrdunXbu3Knx48dr7NixRe7P0dFR+fn5JR6z\nS5cuGjdunC5duqTevXvbgtnZ2VnPPfdciV0m19d27ZfY2dlZAQEBWr58eaH1N27cqN27d2vBggXq\n06ePnnzyyULzrt/39a2Fa+fm2uu65m5todarV08DBgxQ1apVNXr0aL3//vu2ZQ4ODhoxYoRee+01\n22u63vPPP68hQ4ZowIABhf5ww1VWq1W5ubny8/OTn5+fwsPD1blzZ6Wmpqp79+7atm2bfv/990I3\nsP3lL3+Rr6+vVqxYUeCPw/Lsz++n+Ph47d27V1FRUXJ2dlaTJk0KrF+vXj2dOXNGv/76q86fP6+6\ndevadT24nouLi4KDg3XgwAGlpaUpKytLq1ev1rlz59S3b19JUrdu3TRixAhVqlTJtt9KlSpp5cqV\nha57H3zwgb7++mt99NFH2rlzpyIjI+/Ambkzjhw5ogYNGsjZ2Vlt27bVjBkzCixfvnx5sddhb29v\nbdy4Ufv27VNMTIy+/fZbNWvWTFLR18AKFSpI0i2/b52dnW3/9/b2VlRUVIHlK1asUN++ffWvf/3r\nlvZvr3LRbV6vXj3bHZ779+9XQECAateurSNHjkiSvvrqK1vr9ppVq1bp3Llz6tGjhwYPHqzExEQ5\nODgoLy+vwHoPP/ywrZtl586dxXbVSld/aZ5//nlbd1jjxo1t3exnz57VggULJEleXl46efKkrly5\not27dxfaT926dXXy5Elb98/ixYuVlpamTz75RD/88INCQkI0atQoHTlypMh51zRo0EDffvut8vLy\nlJeXp0OHDqlBgwb2n9i7xBNPPKFatWpp6dKlBea3bdtWp0+f1rFjxwptU61aNYWEhGjNmjWlVabp\nrFu3TlOmTLFd3M6fP6/8/HxVrVpVnTp10p49e3TgwIEiPwt84okn9Pbbb5f7LvNr/vx+yszMlI+P\nj5ydnfX555/rypUrhe5Ebtu2rRYuXGi7E7+460FJDh8+rLp16yozM1O+vr5ycHDQjh07bMfy9PRU\nlSpVtHHjRttHG/Xr19eXX34pSfrkk08UFxenhIQEbd68WYGBgZo+fbpOnjx5Z07MHfDLL79oxYoV\n+uc//yl/f3/t27dPly5dktVq1axZs/THH38oICDAdh1es2aNPvroI9v2e/bs0Z49e9S6dWtNmTKl\nwDWwTp06SkpKsj2OOj4+XgEBAXek7ipVqkiSTpw4IUmKiorS0aNH1ahRI+3cuVP5+fnKycnRzJkz\n78jx/sx0fzL/9NNPtu4ISRozZowmT56sl19+WRaLRVWqVFFkZKScnZ21fv16PfXUU2revHmhG5tq\n166tUaNGyd3dXS4uLoqMjNRvv/2mefPmFeie7dKli/bs2aOBAwfKyclJr7zySon1devWTatWrdJX\nX32lzp07a+/evQoLC9OVK1c0fPhwSdILL7ygESNGyNfXVw8++GChlmOlSpU0ceJEDRs2TC4uLmrY\nsKG8vb1Vp04dTZs2TZUrV5ajo6MmT56sP/74o9C8a93/vr6+Cg0N1cCBA2W1WtWvXz/VrFnzts5/\nWZk8ebL69OmjZ599tsD80aNHq1+/op8O9cwzz5T51/buZr1799aPP/6ofv362W6Kmjx5sipWrKiK\nFSuqatWquu+++wp160pXP9OdN2+eWrVqVQaVl43r30+tWrXSsmXLNHDgQIWEhKht27aaPn16gfU7\ndOigsLAwbdq0SZKKvR782YQJE1S5cmVdvnxZf/vb39S1a1elpqbqf/7nf/Ttt9+qT58+8vHx0euv\nv67hw4erU6dO2rlzp+2jjUmTJmnKlClatmyZKlSooPnz58tisWjBggVau3atHB0dy3w46mvX8dzc\nXF25ckVTp05VjRo1JEmDBg3SgAED5OjoqJCQEFWsWFGDBw/W2LFjFR4eLldXV82bN0/vvXf1yXu1\na9fWmDFj9M4778hisWjkyJG2xlrlypU1duxYDR06VA4ODnrkkUcUGBh4S19NK0pERIQmTJhga4WH\nhobKxcVFjz76qEJDQ2W1WvWPf/zjjhzrz8rt8Kjnzp3Tvn371KlTJ6WlpWnw4MHatm1bWZcl6WpP\nQJ06deTr66upU6eqWbNmhbomAcAe48aNU69evdSiRYuyLgWlyHQtb3u5urpq69atts9KJkyYUNYl\n2VitVg0fPlyurq62LkoAuBk5OTkKDw/Xww8/THDfg8ptyxsAgPKqXNywBgDAvYTwBgDAZAhvAABM\nhvAGypEzZ86oYcOGBZ781a5dOyUlJd32vhMTE23fWT1x4oQSEhIkXX2q24cffnjb+wdgP8IbKEc2\nbNggPz8/Qx6D2qBBA9uwmzt27ND3339/x48BwD7l9qtiwL1o/fr1mj59usaPH6+vv/7aNn6zdPWr\nRePGjVNKSop8fHzk6OiooKAg9evXT+vWrdOaNWtUqVIlVa1aVbNmzZKbm5uaNm2qvn37Kj8/Xx06\ndNCiRYs0duxYrVq1Sm5ubqpYsaKkq0/2e+655/Tzzz+rd+/eevbZZ7VkyRKlp6crIyNDR48e1bBh\nw5SYmKgjR47I29tbb7zxRpFDFwO4McIbKCf279+vvLw8tWjRQk8++aRiY2MLhPemTZuUl5enDz/8\nUOnp6erSpYuCgoKUmpqqJUuW6JNPPpGbm5teeeUVrVixQsOHD9fFixcVHBysoKAg28MemjRposce\ne0yPPPKIunfvrt27d+vs2bN68803dfr0aXXu3Nk2Et6PP/6oqKgoxcfH65lnntHWrVtVq1YttW/f\nXkePHjXlcL3A3YBuc6CcWLdunXr16iWLxaLevXtr69atunTpkm15YmKimjdvLunq+PqPPPKIJOn7\n77+Xv7+/bXjN5s2b67vvvpN0dUCh6/8AKM61/fr4+OjixYu24Sn//ve/y2KxyMfHR1WrVlXt2rVl\nsVh0//3339STnAAURMsbKAeys7P16aefqnr16tqxY4ekq48ivPZc7mvT14+jX9TT2KSrgX19d/a1\npyiV5M9PaLo29tP1T68rbh0AN4+WN1AOfPzxx2rWrJm2bNmijRs3auPGjZoxY0aBG9cefPBB29P3\nzp49q4MHD0qSAgIClJCQYHvy0p49e9S4ceMSj2exWHT58mWDXg2AG6HlDZQD69at0/PPP19gXqdO\nnTRnzhzb84t79+6tL774QqGhofL19VVgYKAcHR3l4+OjUaNG6emnn5aLi4t8fHz00ksvlXi8Fi1a\naO7cubSegTLC2ObAPSItLU1ff/21OnfurPz8fPXq1UvTp09XkyZNyro0ADeJljdwj3B3d9eWLVu0\nfPlyWSwWtWnThuAGTIqWNwAAJsMNawAAmAzhDQCAyRDeAACYDOENAIDJEN4AAJgM4Q0AgMn8Pxy7\nNjaN6OuLAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb8b82dc630>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "9YlDLBGwvKXe",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Logistic Regression , KNN, SVM tend to work  quite well, Whereas Naive Bayes suffers a lot as it is more suitable for text/catagorical data."
      ]
    },
    {
      "metadata": {
        "id": "AO3L3RkrqDol",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## On the basis of Train Time"
      ]
    },
    {
      "metadata": {
        "id": "tlAbEYw3qOQO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "outputId": "e397cc8f-6ac6-4e2e-a996-533eaa92dfe4"
      },
      "cell_type": "code",
      "source": [
        "sns.barplot('Algorithm','Train_Time', data = df)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py:1428: FutureWarning: remove_na is deprecated and is a private function. Do not use.\n",
            "  stat_data = remove_na(group_data)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb8b66988d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nmjt3rlxcXOTn56ewsDAlJydrxIgRcnJyUk5Ojj7++GOZTKZbpsXFxenXX39VaGio5s+fr9jYWElS\ny5YtNWDAAIWFhcnHx0eHDh1ScnKyJk+enOsqewXJn3/+qdDQUH366afy9PSUJPXs2VOLFi1St27d\nVKJEiVyPr169uq5cuaLt27erYcOGjohsGJcuXVJmZqauXr0qV1dXVaxYUQsXLtTcuXMVGxurIUOG\nSJLWrl2rdu3aSbr++S5atKiOHj2qp59+Wnv27FHlypWVlJTkyJdiF3l9liZOnKj9+/crMzNTr776\nqrp27aqwsDC1adNGU6dO1fTp01W2bFklJSVpyJAhWrZs2W23BXdy+fJlOTs7y93dXdnZ2QoNDVVK\nSorS09M1ZMgQVahQQeHh4daRtxkzZqho0aJq1KiRxo8fL5PJZN0WFilSRCNGjJDZbFZWVpaGDBmi\nJk2a2PW9uxsVKlTQwIEDtWjRIo0fP17R0dFas2aNnJycFBAQoL59++rChQsaPny4Ll26JA8PD02Z\nMkVz585VyZIl1aFDB7399tvKyspSVlaWxo4dq0uXLik6OlpTp05VbGys5s2bJ2dnZ1WvXl1jxozR\ntGnTdPHiRR0/flx//PGHRo0apaZNm+ab9eTJkxoxYoTc3d0VHBxszeLi4qIyZcpowoQJ1j7ZvXu3\ncnJyFBwcbP338yAZdmj9Tj788EONHDlSUVFRqlevnhYsWKAtW7YoMzNT//73v9WgQQOdOXMm1zIr\nVqzQq6++qqioKPXv319ms1n9+vVT27Zt1b17d+vjVq5cqVKlSmnJkiXq1q2bNm7cmGeW1NRU7d+/\nX88++6zWrFkjb29vRUVFafr06froo48kSZMnT1ZkZKTmzJmjhIQE67K//PKL5syZo0qVKmnGjBla\nsGCBFi5cqFOnTmnPnj1at26dGjVqpKioKI0ePVpms/m2025ITEzU119/rejoaEVHR2vt2rX6448/\nJElZWVmaM2eOevfurZUrV97334E93NjgBQYGqnLlytbphQoV0uuvv64vv/zytsv9z//8jz777LN8\nrxb4uKtSpYqee+45tWzZUmFhYYqNjVV2drZefvll6zUerl27pv/+979q1aqVdbk2bdpozZo1kqTY\n2Fi1bt3aIfkfhtt9ljIzM/XEE09o8eLFWrRokT7/PPfVDgMCArRp0yZJ0saNG9W6des7bgv+6t13\n31VISIheeuklde7cWcWKFdP58+f14osvauHChfr88881bdo0Va5cWVlZWTp9+rQkafPmzWrbtq0m\nTJig8ePHa/78+WrcuLGio6P1yy+/KC0tTdHR0ZozZ47Onz9vp3fr3vn5+eno0aNKTEzUt99+q8WL\nFys6Olrr169XcnKy5syZoxdffFGLFi1Sw4YNcw3Fb9++XaVLl1ZUVJQmT56ss2fPWuddvnxZn376\nqf71r39p8eLFOnnypHbs2CFJOn36tGbNmqXRo0ff1Q27EhISNHnyZDVv3lwffPCB/vd//1cLFiyQ\nl5eXvv32W+3evVtJSUmKjo7WggULNGPGDGVkZDy4N+v/e+T2yI8dO6aaNWtKkl544QV98cUXKlKk\niOrUqSNJatq0qVxccr/sli1baty4cfr999/Vtm1bVa5cWfv27btl3YcOHbJ+c3755Zdv+/yxsbE6\nePCgMjMzlZqaqjFjxsjLy0t79+7Vnj17FB8fL+n6BiArK0tJSUmqVq2aJKlJkybKycmRJP3973+X\nm5ubEhISlJycrH79+kmSLl68qOTkZDVu3FiDBw/WxYsX1aZNG9WuXVvu7u63TPvtt98kXf/A1axZ\n0/ra69SpYz3mV7duXUmSr6+v9u/ffy9vu90dP35cYWFhmj9/vjp06CBfX1/rvKCgIHXt2vW2e4IV\nK1ZUtWrVrCMRuLPIyEgdO3ZMW7Zs0ezZs7V48WItWLBAJUuW1JEjR3T+/HlVq1Yt18WaWrZsqR49\neuitt97Szp07NWrUKAe+Avu63WepUKFCOn/+vHr06CFXV1elpaXlWqZ169aaNGmSevXqpY0bN2rc\nuHGaN2/ebbcFbm5uuZadOHGinn32WWVlZWnw4MGqWrWq6tWrpwMHDmjp0qVycnLSuXPnJEmvvPKK\n1q5dq7Zt26pYsWIqVaqU9u/fr/DwcEnXv6zXqFFDTz31lC5fvqwRI0aoVatWd9yOOdKNEYgDBw7o\nxIkT6t27t3V6UlKSfv75Zw0dOlSS9Nprr0mSdSeoVq1a+uyzzzR27Fi1bt1aTZo0UVxcnCTp999/\n15NPPqmiRYtKkurXr29d7kY/+Pr66uLFizZnLV++vEqWLKnU1FSdOHHCOnKVnp6ukiVL6vTp09q3\nb59CQkIkXf8ybDabVb58+ft5i27xyBX5za5evSonJydZLBY5OztLkkwm0y2Pa9iwoWJiYrRp0yaF\nhYVp5MiRt12fs7Ozrl27ludztm3bVqGhobpy5Yo6depkLWlXV1cNHDgwz2GVm7Pd+Eft6uoqPz8/\nzZkz55bHr1q1Sj/++KOmTJmizp07Kygo6JZpN6/75j2JG+/Njdd1Q0Hdc33mmWfUq1cveXl5afjw\n4Zo/f751npOTk4YMGaLPP/+OMok9AAAJYUlEQVTc+ppuNmjQIPXr10+9evW65UscrrNYLMrKylLl\nypVVuXJlhYSEKDAwUMnJyWrfvr2+/fZbXbhw4ZaT3/72t7+pXLlymjdvXq4vio+qv36Wdu7cqR07\ndigqKkqurq6qXbt2rsc/88wzOnPmjE6dOqWLFy+qUqVKNm0Lbubm5qamTZtq9+7dSklJ0fnz57Vo\n0SKdO3dOXbp0kSS1a9dOQ4YMUZEiRazrLVKkiBYsWHDLNu/f//634uPj9fXXX2vTpk2aOHHiA3hn\nHpyDBw+qatWqcnV1VbNmzTR+/Phc8+fMmXPH7bCPj49WrVqluLg4LV68WD/99JPq1asn6fbbwEKF\nCknSPX9uXV1drf/18fFRVFRUrvnz5s1Tly5d9Oabb97T+m31yA2tP/PMM9azRXft2iU/Pz9VqFBB\nBw8elCRt3brVutd7w8KFC3Xu3Dm98sor6tOnjxISEuTk5KTs7Oxcj6tRo4Z1KGbTpk13HM6Vrv8j\nGjRokHXYrGbNmtah+LNnz2rKlCmSJG9vbx07dkw5OTn68ccfb1lPpUqVdOzYMesQ0dSpU5WSkqJv\nvvlGv/76qwICAjR06FAdPHjwttNuqFq1qn766SdlZ2crOztb+/btU9WqVW1/YwuIl156SeXLl9f0\n6dNzTW/WrJlOnz6tI0eO3LJMqVKlFBAQoCVLljysmIYTExOj8PBw64bu4sWLunbtmry8vNSmTRtt\n27ZNu3fvvu2xw5deeklfffXVIz2sfsNfP0tpaWny9fWVq6urNm7cqJycnFvOZm7WrJk+/fRT69n8\nd9oW5GX//v2qVKmS0tLSVK5cOTk5OWnDhg3W5/L09FTx4sW1atUq66GPKlWq6IcffpAkffPNN9q+\nfbsOHTqkNWvWqG7duho3bpyOHTv2YN6YB+SPP/7QvHnz9Nprr6l69eqKi4vTlStXZLFY9MEHHygj\nI0N+fn7W7fCSJUv09ddfW5fftm2btm3bphdffFHh4eG5toEVK1bUiRMnrLfI3rlzp/z8/B5I7uLF\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb8b662ea58>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "lR9j5e74qlZP",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## On the Basis of Prediction Time"
      ]
    },
    {
      "metadata": {
        "id": "chTg7sORvjdp",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "SVM Takes a VERY long time to train as it does not support Multiclass classification or even OneVAll Classification."
      ]
    },
    {
      "metadata": {
        "id": "BKjSxOZrqjqE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "outputId": "bad17db8-4ed4-475e-b40f-b033f000988b"
      },
      "cell_type": "code",
      "source": [
        "sns.barplot('Algorithm','Prediction_time', data = df)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py:1428: FutureWarning: remove_na is deprecated and is a private function. Do not use.\n",
            "  stat_data = remove_na(group_data)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb8b65f52b0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nDRv0ww8/KDw8XGPGjFFOTo7eeecdubm5yc3NTR999JHGjx+vCxcuyN/fX3v37lWbNm301FNPafjw\n4UpMTFSxYsU0ZcoUPfTQQ7fM4ubmpscee0wJCQkqV66cxowZo4SEBOXk5GjQoEFq2LChduzYoYkT\nJ6ps2bKqXLmyvLy8VL9+fS1YsEAZGRmKiIhQUlKSFixYIBcXFwUEBGj48OFKSkrS0KFD5eTkpNzc\nXH3wwQcymUw3TIuNjdVvv/2miIgILV68WOvXr5cktWzZUn379tXw4cPl6+urQ4cOKSkpSVOnTs1z\nlr3C5K+//lJERIQ++ugjeXl5SZJ69Oih5cuXq1u3bipdunSe+9esWVOZmZnauXOnGjZsWBCRDePC\nhQvKysrS5cuX5erqKn9/fy1dulQLFizQ+vXrNXDgQEnShg0b1L59e0lX398lSpTQ0aNH9eijj2rP\nnj2qWrWqEhMTC/KpOISt99KkSZO0f/9+ZWVl6fnnn1dYWJiGDx+uNm3aaObMmZo9e7bKly+vxMRE\nDRw4UKtWrbrptuBWLl68KGdnZ3l4eCgnJ0cRERFKTk5WRkaGBg4cqEqVKmnMmDHWkbc5c+aoRIkS\natSokcaPHy+TyWTdFhYvXlxDhw6V2WxWdna2Bg4cqKefftqhr93tqFSpkvr166fly5dr/PjxWrZs\nmdatWycnJycFBwfrlVde0blz5/TWW2/pwoUL8vT01LRp07RgwQKVKVNGHTt21Jtvvqns7GxlZ2dr\n7NixunDhgpYtW6aZM2dq/fr1WrRokZydnVWzZk2NHj1as2bN0vnz53X8+HH9+eefGjlypJo2bZpv\n1pMnT2ro0KHy8PBQr169rFlcXFxUrlw5vfvuu9Y+2b17t3Jzc9WrVy/rv597ybBD67fy3nvvadiw\nYYqMjFS9evW0ZMkSbdu2TVlZWfr888/VoEEDpaSk5FlmzZo1ev755xUZGak+ffrIbDard+/eateu\nnZ577jnr/b788kuVLVtWK1euVLdu3bR582abWVJTU7V//3499thjWrdunXx8fBQZGanZs2dr4sSJ\nkqSpU6dqypQpmj9/vuLj463L/vrrr5o/f74qV66sOXPmaMmSJVq6dKlOnTqlPXv2aOPGjWrUqJEi\nIyM1atQomc3mm067JiEhQV988YWWLVumZcuWacOGDfrzzz8lSdnZ2Zo/f75eeOEFffnll3f9d+AI\n1zZ4ISEhqlq1qnV6sWLF9PLLL2vu3Lk3Xe5//ud/NH369HzPFvige/zxx/XEE0+oZcuWGj58uNav\nX6+cnBw988wz1nM8XLlyRd9//71atWplXa5NmzZat26dJGn9+vVq3bp1geS/H272XsrKytLDDz+s\nFStWaPny5ZoxI+/ZDoODg7VIUUz4AAANh0lEQVRlyxZJ0ubNm9W6detbbgv+bsSIEQoPD1fbtm3V\npUsXlSxZUunp6Xrqqae0dOlSzZgxQ7NmzVLVqlWVnZ2t06dPS5K2bt2qdu3a6d1339X48eO1ePFi\nNW7cWMuWLdOvv/6qtLQ0LVu2TPPnz1d6erqDXq07FxAQoKNHjyohIUHffPONVqxYoWXLlmnTpk1K\nSkrS/Pnz9dRTT2n58uVq2LBhnqH4nTt36qGHHlJkZKSmTp2qM2fOWOddvHhRH330kRYuXKgVK1bo\n5MmTiomJkSSdPn1an332mUaNGnVbF+yKj4/X1KlT1bx5c02YMEEff/yxlixZIm9vb33zzTfavXu3\nEhMTtWzZMi1ZskRz5szRpUuX7t2L9f8VuT3yY8eOqXbt2pKkf/3rX/rPf/6j4sWLKygoSJLUtGlT\nubjkfdotW7bUuHHj9Mcff6hdu3aqWrWq9u3bd8O6Dx06ZP3k/Mwzz9z08devX6+DBw8qKytLqamp\nGj16tLy9vbV3717t2bNHcXFxkq5uALKzs5WYmKgaNWpIkp5++mnl5uZKkv75z3/Kzc1N8fHxSkpK\nUu/evSVJ58+fV1JSkho3bqwBAwbo/PnzatOmjQIDA+Xh4XHDtN9//13S1Tdc7dq1rc89KCjIesyv\nbt26kiQ/Pz/t37//Tl52hzt+/LiGDx+uxYsXq2PHjvLz87POCw0NVVhY2E33BP39/VWjRg3rSARu\nbcqUKTp27Ji2bdumefPmacWKFVqyZInKlCmjI0eOKD09XTVq1MhzsqaWLVuqe/fuGjRokHbt2qWR\nI0cW4DNwrJu9l4oVK6b09HR1795drq6uSktLy7NM69at9f7776tnz57avHmzxo0bp0WLFt10W+Dm\n5pZn2UmTJumxxx5Tdna2BgwYoOrVq6tevXo6cOCAoqKi5OTkpLNnz0qSnn32WW3YsEHt2rVTyZIl\nVbZsWe3fv19jxoyRdPXDeq1atVSlShVdvHhRQ4cOVatWrW65HStI10YgDhw4oBMnTuiFF16wTk9M\nTNQvv/yiwYMHS5JeeuklSbLuBNWpU0fTp0/X2LFj1bp1az399NOKjY2VJP3xxx965JFHVKJECUlS\n/fr1rctd6wc/Pz+dP3/e7qwVK1ZUmTJllJqaqhMnTlhHrjIyMlSmTBmdPn1a+/btU3h4uKSrH4bN\nZrMqVqx4Ny/RDYpckV/v8uXLcnJyksVikbOzsyTJZDLdcL+GDRsqOjpaW7Zs0fDhwzVs2LCbrs/Z\n2VlXrlyx+Zjt2rVTRESEMjMz1blzZ2tJu7q6ql+/fjaHVa7Pdu0ftaurqwICAjR//vwb7v/VV19p\n+/btmjZtmrp06aLQ0NAbpl2/7uv3JK69Ntee1zWFdc+1WrVq6tmzp7y9vfXWW29p8eLF1nlOTk4a\nOHCgZsyYYX1O1+vfv7969+6tnj173vAhDldZLBZlZ2eratWqqlq1qsLDwxUSEqKkpCR16NBB33zz\njc6dO3fDl9/+8Y9/qEKFClq0aFGeD4pF1d/fS7t27VJMTIwiIyPl6uqqwMDAPPevVq2aUlJSdOrU\nKZ0/f16VK1e2a1twPTc3NzVt2lS7d+9WcnKy0tPTtXz5cp09e1Zdu3aVJLVv314DBw5U8eLFrest\nXry4lixZcsM27/PPP1dcXJy++OILbdmyRZMmTboHr8y9c/DgQVWvXl2urq5q1qyZxo8fn2f+/Pnz\nb7kd9vX11VdffaXY2FitWLFCP//8s+rVqyfp5tvAYsWKSdIdv29dXV2t//f19VVkZGSe+YsWLVLX\nrl312muv3dH67VXkhtarVatm/bboTz/9pICAAFWqVEkHDx6UJP3444/Wvd5rli5dqrNnz+rZZ5/V\niy++qPj4eDk5OSknJyfP/WrVqmUditmyZcsth3Olq/+I+vfvbx02q127tnUo/syZM5o2bZokycfH\nR8eOHVNubq62b99+w3oqV66sY8eOWYeIZs6cqeTkZH399df67bffFBwcrMGDB+vgwYM3nXZN9erV\n9fPPPysnJ0c5OTnat2+fqlevbv8LW0i0bdtWFStW1OzZs/NMb9asmU6fPq0jR47csEzZsmUVHBys\nlStX3q+YhhMdHa0xY8ZYN3Tnz5/XlStX5O3trTZt2mjHjh3avXv3TY8dtm3bVp9++mmRHla/5u/v\npbS0NPn5+cnV1VWbN29Wbm7uDd9mbtasmT766CPrt/lvtS2wZf/+/apcubLS0tJUoUIFOTk56dtv\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb8b81afb00>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "JAiRUfKyv-5S",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "KNN and SVM both seem to have a very significant prediction time.!!"
      ]
    },
    {
      "metadata": {
        "id": "QCFOY7gBrL7g",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## On the basis of F1 Score"
      ]
    },
    {
      "metadata": {
        "id": "tkIWreN1E8WJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "outputId": "27b8c563-80f5-4073-8ab6-6532cd4f5774"
      },
      "cell_type": "code",
      "source": [
        "sns.barplot('Algorithm','F1', data = df)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py:1428: FutureWarning: remove_na is deprecated and is a private function. Do not use.\n",
            "  stat_data = remove_na(group_data)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb8b65c93c8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nlyR5e3srNTVVV65c0a5du4rtp0GDBkpNTbV3/yxYsEBZWVn64osvdOzYMYWGhuqVV17R4cOHS5x3\nXaNGjXTgwAEVFhaqsLBQBw8eVKNGjcp/YO8RzzzzjOrVq6dFixYVmd++fXudPn1aR48eLbZNrVq1\nFBoaqlWrVt2tMk1nzZo1mjzA6+JFAAAHVklEQVR5sv3kdv78eV29elU1a9ZU586dlZCQoH379pV4\nLfCZZ57R+++/7/Bd5tf98f2Uk5MjX19fubq6atu2bbpy5UqxO5Hbt2+vt99+234nfmnng7IcOnRI\nDRo0UE5Ojvz8/OTk5KSvvvrK/lpeXl6qXr261q9fb7+00bBhQ3399deSpC+++EKJiYlKTk7Wxo0b\n1aJFC02bNk2pqal35sDcAT///LOWLVumF198UYGBgdqzZ48uXbokm82mGTNm6Pfff1dQUJD9PLxq\n1Sp99tln9u0TEhKUkJCgtm3bavLkyUXOgf7+/kpLS7M/jjopKUlBQUF3pO7q1atLko4fPy5JiomJ\n0ZEjR9SkSRNt375dV69eVX5+vt5444078np/ZLqPzCdOnLB3R0jSuHHjNGnSJP3zn/+UxWJR9erV\nNWvWLLm6umrt2rV64YUX1KpVq2I3NtWvX1+vvPKKPDw85ObmplmzZunXX3/VvHnzinTPdu3aVQkJ\nCRo4cKBcXFw0Z86cMuvr1q2bVqxYoW+++UZdunTR7t27FR4eritXrmj06NGSpFdffVVjxoyRn5+f\nHnrooWItxypVqigqKkrDhw+Xm5ubGjduLB8fH/n7+2vq1KmqWrWqnJ2dNWnSJP3+++/F5l3v/vfz\n81P//v01cOBA2Ww29e3bV3Xr1r2t419RJk2apN69e2vEiBFF5o8dO1Z9+5b8dKghQ4ZU+Nf27mW9\nevXSTz/9pL59+9pvipo0aZIqV66sypUrq2bNmqpRo0axbl3p2jXdefPm6cknn6yAyivGje+nJ598\nUh988IEGDhyo0NBQtW/fXtOmTSuyflhYmMLDw7VhwwZJKvV88EcTJ05U1apVdfnyZf3lL3/Rs88+\nq8zMTP3Xf/2XDhw4oN69e8vX11fvvfeeRo8erc6dO2v79u32Sxuvv/66Jk+erA8++ECVKlXSW2+9\nJYvFovnz52v16tVydnau8OGor5/HCwoKdOXKFU2ZMkV16tSRJA0aNEgDBgyQs7OzQkNDVblyZQ0e\nPFjjx49XRESEqlWrpnnz5umjj649ea9+/foaN26cPvzwQ1ksFr388sv2xlrVqlU1fvx4DRs2TE5O\nTnr88cfVokWLW/pqWkmio6M1ceJEeyu8f//+cnNz0xNPPKH+/fvLZrPpb3/72x15rT9y2OFRz507\npz179qhz587KysrS4MGDtWXLloouS9K1ngB/f3/5+flpypQpatmyZbGuSQAojwkTJqhnz55q3bp1\nRZeCu8h0Le/yqlatmjZv3my/VjJx4sSKLsnOZrNp9OjRqlatmr2LEgD+jPz8fEVEROixxx4juO9D\nDtvyBgDAUTnEDWsAANxPCG8AAEyG8AYAwGQIb8CBnDlzRo0bNy7y5K8OHTooLS3ttvedkpJi/87q\n8ePHlZycLOnaU90+/fTT294/gPIjvAEHsm7dOgUEBBjyGNRGjRrZh9386quv9MMPP9zx1wBQPg77\nVTHgfrR27VpNmzZNkZGR+vbbb+3jN0vXvlo0YcIEZWRkyNfXV87OzgoODlbfvn21Zs0arVq1SlWq\nVFHNmjU1Y8YMubu7q3nz5urTp4+uXr2qsLAwvfPOOxo/frxWrFghd3d3Va5cWdK1J/uNHDlSJ0+e\nVK9evTRixAgtXLhQVqtV2dnZOnLkiIYPH66UlBQdPnxYPj4+Wrx4cYlDFwO4OcIbcBB79+5VYWGh\nWrdureeff17x8fFFwnvDhg0qLCzUp59+KqvVqq5duyo4OFiZmZlauHChvvjiC7m7u2vOnDlatmyZ\nRo8erYsXLyokJETBwcH2hz00a9ZMTz31lB5//HF1795du3bt0tmzZ/Wvf/1Lp0+fVpcuXewj4f30\n00+KiYlRUlKShgwZos2bN6tevXrq2LGjjhw5YsrheoF7Ad3mgINYs2aNevbsKYvFol69emnz5s26\ndOmSfXlKSopatWol6dr4+o8//rgk6YcfflBgYKB9eM1WrVrp+++/l3RtQKEbPwCU5vp+fX19dfHi\nRfvwlH/9619lsVjk6+urmjVrqn79+rJYLHrggQf+1JOcABRFyxtwAHl5efryyy9Vu3ZtffXVV5Ku\nPYrw+nO5r0/fOI5+SU9jk64F9o3d2defolSWPz6h6frYTzc+va60dQD8ebS8AQfw+eefq2XLltq0\naZPWr1+v9evXa/r06UVuXHvooYfsT987e/as9u/fL0kKCgpScnKy/clLCQkJatq0aZmvZ7FYdPny\nZYN+GwA3Q8sbcABr1qzRqFGjiszr3LmzZs+ebX9+ca9evbRjxw71799ffn5+atGihZydneXr66tX\nXnlFL730ktzc3OTr66vXXnutzNdr3bq15s6dS+sZqCCMbQ7cJ7KysvTtt9+qS5cuunr1qnr27Klp\n06apWbNmFV0agD+Jljdwn/Dw8NCmTZu0ZMkSWSwWtWvXjuAGTIqWNwAAJsMNawAAmAzhDQCAyRDe\nAACYDOENAIDJEN4AAJgM4Q0AgMn8PyCOIAvzoOk5AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb8b65b87f0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "tWR9n5lp37So",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Logistic Regression, KNN, SVM seem to have the best among all F1 Score."
      ]
    },
    {
      "metadata": {
        "id": "YdnKOBoVIP2y",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Winning Model = SVM"
      ]
    },
    {
      "metadata": {
        "id": "_M-GNfMcIPM9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        },
        "outputId": "be23dbae-2d6b-457b-a390-f1252929d7ec"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "# Making the Final Classification model.\n",
        "classifier = SVC( C= 10, kernel = 'poly')\n",
        "tick = time.time()\n",
        "classifier.fit(x_train_pca, y_train)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print(\"Time taken for training a SVM = \" + str(algo_time))\n",
        "train_time.append(algo_time)\n",
        "print(train_time)\n",
        "\n",
        "svm_predict = classifier.predict(x_test_pca)\n",
        "tock = time.time()\n",
        "algo_time = tock - tick\n",
        "print('time taken to predict the test values is :' + str(algo_time))\n",
        "prediction_time.append(algo_time)\n",
        "print(prediction_time)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time taken for training a SVM = 463.16174054145813\n",
            "[45.971176862716675, 2.0588316917419434, 469.27832078933716, 0.792243480682373, 146.40933847427368, 463.16174054145813]\n",
            "time taken to predict the test values is :546.7936198711395\n",
            "[0.021033287048339844, 503.7102689743042, 551.7381176948547, 2.3547520637512207, 147.8577642440796, 546.7936198711395]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "RuVlGDMPSejO",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# 9. Confusion Matrix And Error Analysis\n",
        "In the field of machine learning and specifically the problem of statistical classification, a confusion matrix, also known as an error matrix,is a specific table layout that allows visualization of the performance of an algorithm, typically a supervised learning one (in unsupervised learning it is usually called a matching matrix). Each row of the matrix represents the instances in a predicted class while each column represents the instances in an actual class (or vice versa).The name stems from the fact that it makes it easy to see if the system is confusing two classes (i.e. commonly mislabelling one as another).\n",
        "\n",
        "It is a special kind of contingency table, with two dimensions (\"actual\" and \"predicted\"), and identical sets of \"classes\" in both dimensions (each combination of dimension and class is a variable in the contingency table)."
      ]
    },
    {
      "metadata": {
        "id": "x3vPgehTSejQ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "![alt text](f1.png \"Title\")"
      ]
    },
    {
      "metadata": {
        "id": "wjM02NKUSejQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "outputId": "f745e6aa-c125-4011-8378-59cce1ee1016"
      },
      "cell_type": "code",
      "source": [
        "#Making the confusion Matrix\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "cf= confusion_matrix(y_test, svm_predict)\n",
        "\n",
        "# Visualizing the Confusion Matrix`\n",
        "\n",
        "plt.matshow(cf , cmap = plt.cm.gray, )\n",
        "plt.show()\n",
        "\n"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAU0AAAFSCAYAAAB2cI2KAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAADxNJREFUeJzt3V9o1fX/wPHXcdIX2iqnaGItCzMM\np5TghWbSheVFEFSUI0wvi/6AYFCMwEAQ9KrIKKOiq2Bhpl5EReHAi0lQYNpfNRL/oCZNrUzInfO9\n8/cH19nrnJ19ztkejysd+5zP672N5z6fg5+3pUqlUgkARmRS0QMAtBLRBEgQTYAE0QRIEE2ABNEE\nSGiaaG7atClWrVoVPT098e233xY9zpjYsmVLrFq1Kh599NH4/PPPix5nzFy6dClWrFgRO3bsKHqU\nMbN79+546KGH4pFHHon+/v6ix2m4v/76K5577rl48skno6enJ/bu3Vv0SKNmctEDRER89dVXcfTo\n0ejr64sjR45Eb29v9PX1FT1WQ+3bty8OHToUfX19MTg4GA8//HA88MADRY81Jt5888244YYbih5j\nzAwODsYbb7wRH330UVy8eDFef/31uO+++4oeq6E+/vjjuO2222L9+vVx+vTpWLt2bXz66adFjzUq\nmiKaAwMDsWLFioiImDNnTpw/fz7+/PPP6OjoKHiyxlm8eHEsXLgwIiKuv/76+Pvvv2NoaCja2toK\nnqyxjhw5EocPHx730fjfBgYGYsmSJdHR0REdHR2xcePGokdquM7Ozvjpp58iIuLChQvR2dlZ8ESj\npyluz8+ePft/vqhTp06N3377rcCJGq+trS2uvfbaiIjYvn17LF++fNwHMyJi8+bN8dJLLxU9xpg6\nfvx4XLp0KZ5++ul44oknYmBgoOiRGu7BBx+MkydPxv333x+rV6+OF198seiRRk1TXGn+fxPpyc4v\nvvgitm/fHu+9917RozTczp0746677oqurq6iRxlz586di61bt8bJkydjzZo1sWfPniiVSkWP1TC7\ndu2KWbNmxbvvvhs//vhj9Pb2jpv3sJsimjNmzIizZ89e+fuZM2di+vTpBU40Nvbu3RtvvfVWvPPO\nO3HdddcVPU7D9ff3x7Fjx6K/vz9OnToV11xzTcycOTOWLl1a9GgNNW3atLj77rtj8uTJccstt0R7\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb8b64f48d0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "gISkuVciSejS",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Here the rows represent the ACTUAL CLASS and the columns represent PREDICTED CLASS.\n",
        "the whiteness across the diagonal shows the high values that Most of the class were predicted correctly."
      ]
    },
    {
      "metadata": {
        "id": "lOs6qus-SejT",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## 10. Error Analysis (Test Set)"
      ]
    },
    {
      "metadata": {
        "id": "J2ssPubASejU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "outputId": "3a5e0d31-03fc-427d-ecbc-a9773d853104"
      },
      "cell_type": "code",
      "source": [
        "# Analyzing the Errors\n",
        "row_sums = cf.sum(axis=1 , keepdims = True)\n",
        "normal_cf = cf/row_sums\n",
        "\n",
        "np.fill_diagonal(normal_cf,0)\n",
        "plt.matshow(normal_cf,cmap = plt.cm.gray)\n",
        "\n",
        "plt.title(\"error Analysis\")\n",
        "plt.show()\n",
        "\n"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7fb8b64f4898>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "Z4ypoaTzSejV",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Looking at the error analysis:\n",
        "\n",
        "#### most prominent errors are:\n",
        "\n",
        "$4,9$ and $9,4$\n",
        "\n",
        "$9,7$ and $7,9$\n",
        "\n",
        "$8,5$ but not $5,8$\n",
        "\n",
        "$5,3$ and $3,5$\n",
        "\n",
        "\n",
        "\n",
        "##### That is these values were often misunderstood ,\n",
        "##### but it should also be noted that the most of the errors are not symmetrical."
      ]
    },
    {
      "metadata": {
        "id": "Z3PujA6RSejt",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## And thats it, Contratulations to making it to the end of tutorial like Classification on MNIST dataset. I hope most of the trivial aspects are covered in this Notebook.\n",
        "## Stay Tuned for more."
      ]
    },
    {
      "metadata": {
        "id": "ublUqRf7Seju",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}